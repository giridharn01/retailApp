{"version":3,"file":"static/js/260.caafc4cf.chunk.js","mappings":"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","sources":["pages/user/ServiceRequestPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { apiRequest } from '../../utils/api';\n\n\nconst statusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  'in-progress': 'bg-blue-100 text-blue-800',\n  completed: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800',\n  default: 'bg-gray-100 text-gray-800',\n};\n\nconst ServiceRequestPage = React.memo(() => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState('');\n  const [serviceTypes, setServiceTypes] = useState([]);\n  const [serviceRequests, setServiceRequests] = useState([]);\n  const [statusUpdates, setStatusUpdates] = useState([]);\n  const [showUpdateNotification, setShowUpdateNotification] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const prevRequestsRef = useRef([]);\n\n  const [formData, setFormData] = useState({\n    serviceType: '',\n    preferredDate: '',\n    preferredTime: '',\n    contactNumber: '',\n    description: ''\n  });\n\n  // Fetch service types\n  const fetchServiceData = useCallback(async () => {\n    try {\n      const serviceRes = await apiRequest('/service-types');\n      setServiceTypes(serviceRes.data || []);\n    } catch (err) {\n      setError('Failed to load service data');\n    }\n  }, []);\n\n  // Fetch user's service requests (no dependency on serviceRequests)\n  const fetchUserRequests = useCallback(async (silent = false) => {\n    try {\n      if (!silent) {\n        setLoading(true);\n      }\n      const res = await apiRequest('/service-requests/user');\n      const newRequests = res.data || [];\n\n      // Compare with previous requests for status changes\n      const prevRequests = prevRequestsRef.current;\n      if (silent && prevRequests.length > 0) {\n        const updates = [];\n        newRequests.forEach(newRequest => {\n          const oldRequest = prevRequests.find(r => r._id === newRequest._id);\n          if (oldRequest && oldRequest.status !== newRequest.status) {\n            updates.push({\n              serviceType: newRequest.serviceType,\n              oldStatus: oldRequest.status,\n              newStatus: newRequest.status\n            });\n          }\n        });\n        if (updates.length > 0) {\n          setStatusUpdates(updates);\n          setShowUpdateNotification(true);\n          setTimeout(() => setShowUpdateNotification(false), 5000);\n        }\n      }\n      setServiceRequests(newRequests);\n      prevRequestsRef.current = newRequests;\n      if (silent) {\n        setLastUpdated(new Date());\n      }\n    } catch (err) {\n      setError('Failed to fetch your service requests');\n    } finally {\n      if (!silent) {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchServiceData();\n    fetchUserRequests();\n  }, [fetchServiceData, fetchUserRequests]);\n\n  // --- Polling-based real-time updates (Vercel-compatible) ---\n  useEffect(() => {\n    console.log('Setting up polling for real-time updates');\n    \n    // Poll for updates every 10 seconds\n    const pollInterval = setInterval(() => {\n      fetchUserRequests(true); // Silent refresh\n    }, 10000);\n\n    // Also poll when user focuses back on the tab\n    const handleFocus = () => {\n      fetchUserRequests(true);\n    };\n\n    window.addEventListener('focus', handleFocus);\n\n    return () => {\n      clearInterval(pollInterval);\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [fetchUserRequests]);\n\n  const handleChange = useCallback((e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  }, [formData]);\n\n  const formatTime = (dateString) => {\n    return new Date(dateString).toLocaleTimeString('en-IN', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  const isRecentUpdate = (request) => {\n    // Check if request has recent status history updates (last 5 minutes)\n    if (request.statusHistory && request.statusHistory.length > 0) {\n      const latestUpdate = request.statusHistory[request.statusHistory.length - 1];\n      const updateTime = new Date(latestUpdate.timestamp);\n      const now = new Date();\n      const timeDiff = now - updateTime;\n      return timeDiff < 5 * 60 * 1000; // 5 minutes\n    }\n    return false;\n  };\n\n  const handleSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess('');\n    try {\n      await apiRequest('/service-requests', 'POST', formData);\n      setSuccess('Service request submitted successfully!');\n      setFormData({\n        serviceType: '',\n        preferredDate: '',\n        preferredTime: '',\n        contactNumber: '',\n        description: ''\n      });\n      fetchUserRequests();\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [formData, fetchUserRequests]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Status Update Notification */}\n        {showUpdateNotification && (\n          <div className=\"fixed top-4 right-4 z-50 bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg flex items-center space-x-3 animate-pulse\">\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <div>\n              <span className=\"font-medium\">Service request status updated!</span>\n              <div className=\"text-sm opacity-90\">\n                {statusUpdates.map((update, index) => (\n                  <div key={index}>\n                    {update.serviceType}: {update.oldStatus} → {update.newStatus}\n                  </div>\n                ))}\n                <div className=\"text-xs mt-1 opacity-75\">Auto-refreshed</div>\n              </div>\n            </div>\n            <button\n              onClick={() => setShowUpdateNotification(false)}\n              className=\"ml-2 text-white hover:text-gray-200\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        )}\n        {/* Header Section */}\n        <div className=\"mb-10 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Request a Service</h1>\n          <p className=\"text-gray-600 mb-2\">Fill out the form to request a new service. You can also view your previous requests below.</p>\n          <div className=\"w-16 h-1 bg-blue-600 rounded mx-auto\" />\n        </div>\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* New Request Form */}\n          <div className=\"flex-1 bg-white rounded-lg shadow-md p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">New Service Request</h2>\n            {error && (\n              <div className=\"mb-4 rounded-md bg-red-50 p-3 text-red-700 text-sm\">{error}</div>\n            )}\n            {success && (\n              <div className=\"mb-4 rounded-md bg-green-50 p-3 text-green-700 text-sm\">{success}</div>\n            )}\n            {/* --- Card-style form for Service Request --- */}\n            {/* The form is already inside a card container. Update the form fields: */}\n            <form onSubmit={handleSubmit} className=\"space-y-6 w-full max-w-xl\">\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                {/* Service Type */}\n                <div>\n                  <label htmlFor=\"serviceType\" className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Service Type <span className=\"text-red-500\">*</span>\n                  </label>\n                  <select\n                    id=\"serviceType\"\n                    name=\"serviceType\"\n                    value={formData.serviceType}\n                    onChange={handleChange}\n                    className=\"block w-full bg-blue-50 border border-blue-200 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition shadow-sm text-base font-medium\"\n                    required\n                  >\n                    <option value=\"\" disabled className=\"text-gray-400\">Select Service Type</option>\n                    {serviceTypes.map((service) => (\n                      <option\n                        key={service._id}\n                        value={service.name}\n                        className=\"py-3 px-4 text-blue-900 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 border-b border-blue-100 last:border-b-0\"\n                      >\n                        {service.name} &nbsp; <span className=\"text-gray-500\">₹{service.basePrice}</span>\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                {/* Contact Number */}\n                <div>\n                  <label htmlFor=\"contactNumber\" className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Contact Number <span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"tel\"\n                    id=\"contactNumber\"\n                    name=\"contactNumber\"\n                    value={formData.contactNumber}\n                    onChange={handleChange}\n                    className=\"block w-full bg-white border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition shadow-sm text-base\"\n                    placeholder=\"Your phone number\"\n                    required\n                  />\n                </div>\n                {/* Preferred Date */}\n                <div>\n                  <label htmlFor=\"preferredDate\" className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Preferred Date <span className=\"text-red-500\">*</span>\n                  </label>\n                  <input\n                    type=\"date\"\n                    id=\"preferredDate\"\n                    name=\"preferredDate\"\n                    value={formData.preferredDate}\n                    onChange={handleChange}\n                    className=\"block w-full bg-white border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition shadow-sm text-base\"\n                    min={new Date().toISOString().split('T')[0]}\n                    required\n                  />\n                </div>\n                {/* Preferred Time */}\n                <div>\n                  <label htmlFor=\"preferredTime\" className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                    Preferred Time <span className=\"text-red-500\">*</span>\n                  </label>\n                  <select\n                    id=\"preferredTime\"\n                    name=\"preferredTime\"\n                    value={formData.preferredTime}\n                    onChange={handleChange}\n                    className=\"block w-full bg-white border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition shadow-sm text-base\"\n                    required\n                  >\n                    <option value=\"\" disabled>Select Time</option>\n                    <option value=\"09:00\">9:00 AM</option>\n                    <option value=\"10:00\">10:00 AM</option>\n                    <option value=\"11:00\">11:00 AM</option>\n                    <option value=\"12:00\">12:00 PM</option>\n                    <option value=\"13:00\">1:00 PM</option>\n                    <option value=\"14:00\">2:00 PM</option>\n                    <option value=\"15:00\">3:00 PM</option>\n                    <option value=\"16:00\">4:00 PM</option>\n                    <option value=\"17:00\">5:00 PM</option>\n                  </select>\n                </div>\n              </div>\n              {/* Description */}\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-semibold text-gray-700 mb-2\">\n                  Service Description <span className=\"text-red-500\">*</span>\n                </label>\n                <textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleChange}\n                  rows={4}\n                  className=\"block w-full bg-white border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition shadow-sm text-base resize-none\"\n                  placeholder=\"Please describe the issue or service you need...\"\n                  required\n                />\n              </div>\n              <div className=\"flex justify-end\">\n                <button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-base font-semibold rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition\"\n                >\n                  {loading ? 'Submitting...' : 'Submit Request'}\n                </button>\n              </div>\n            </form>\n          </div>\n          {/* Service Requests List */}\n          <div className=\"flex-1 bg-white rounded-lg shadow-md p-6 mt-8 lg:mt-0\">\n            <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 gap-4\">\n              <h2 className=\"text-xl font-semibold text-gray-800\">Your Service Requests</h2>\n              {lastUpdated && (\n                <div className=\"text-xs text-gray-500 flex items-center\">\n                  <span className=\"w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse\"></span>\n                  Last updated: {lastUpdated.toLocaleTimeString()}\n                </div>\n              )}\n            </div>\n            {serviceRequests.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-6xl mb-4\">🛠️</div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">No service requests found</h2>\n                <p className=\"text-gray-600\">You haven't submitted any service requests yet.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {serviceRequests.map((request) => (\n                  <div key={request._id} className={`bg-white rounded-lg shadow-md overflow-hidden ${isRecentUpdate(request) ? 'ring-2 ring-blue-500 ring-opacity-50' : ''}`}>\n                    <div className=\"p-4 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2\">\n                      <div>\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <div className=\"font-medium text-blue-700\">{request.serviceType}</div>\n                          {isRecentUpdate(request) && (\n                            <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\">\n                              <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                              </svg>\n                              Updated\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">Preferred: {request.preferredDate ? new Date(request.preferredDate).toLocaleDateString() : '-'} {request.preferredTime || ''}</div>\n                        <div className=\"text-sm text-gray-500\">Contact: {request.contactNumber}</div>\n                      </div>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium w-max ${statusColors[request.status] || statusColors.default}`}>\n                        {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                      </span>\n                    </div>\n                    <div className=\"px-4 pb-4 text-gray-700 text-sm\">{request.description}</div>\n                    {request.statusHistory && request.statusHistory.length > 1 && (\n                      <div className=\"px-4 pb-4 text-xs text-gray-500\">\n                        <span>Status history: </span>\n                        {request.statusHistory.map((h, idx) => (\n                          <span key={idx}>{h.status}{idx < request.statusHistory.length - 1 ? ', ' : ''}</span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default ServiceRequestPage; "],"names":["statusColors","pending","completed","cancelled","default","React","loading","setLoading","useState","error","setError","success","setSuccess","serviceTypes","setServiceTypes","serviceRequests","setServiceRequests","statusUpdates","setStatusUpdates","showUpdateNotification","setShowUpdateNotification","lastUpdated","setLastUpdated","prevRequestsRef","useRef","formData","setFormData","serviceType","preferredDate","preferredTime","contactNumber","description","fetchServiceData","useCallback","async","serviceRes","apiRequest","data","err","fetchUserRequests","silent","arguments","length","undefined","newRequests","prevRequests","current","updates","forEach","newRequest","oldRequest","find","r","_id","status","push","oldStatus","newStatus","setTimeout","Date","useEffect","console","log","pollInterval","setInterval","handleFocus","window","addEventListener","clearInterval","removeEventListener","handleChange","e","_objectSpread","target","name","value","isRecentUpdate","request","statusHistory","latestUpdate","updateTime","timestamp","handleSubmit","preventDefault","message","_jsx","className","children","_jsxs","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","map","update","index","onClick","onSubmit","htmlFor","id","onChange","required","disabled","service","basePrice","type","placeholder","min","toISOString","split","rows","toLocaleTimeString","concat","toLocaleDateString","charAt","toUpperCase","slice","h","idx"],"sourceRoot":""}