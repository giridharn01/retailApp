{"version":3,"file":"static/js/810.da7ee41d.chunk.js","mappings":"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","sources":["pages/admin/AdminOrderManagementPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { apiRequest } from '../../utils/api';\r\n\r\nconst statusOptions = [\r\n  { value: 'pending', label: 'Pending' },\r\n  { value: 'in-progress', label: 'In Progress' },\r\n  { value: 'ready-for-pickup', label: 'Ready for Pickup' },\r\n  { value: 'cancelled', label: 'Cancelled' },\r\n];\r\n\r\nconst AdminOrderManagementPage = () => {\r\n    const [orders, setOrders] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedOrder, setSelectedOrder] = useState(null);\r\n    const [filter, setFilter] = useState('all');\r\n    const [stats, setStats] = useState({});\r\n    const [editingTracking, setEditingTracking] = useState(false);\r\n    const [trackingData, setTrackingData] = useState({\r\n        trackingNumber: '',\r\n        carrier: '',\r\n        estimatedDelivery: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchOrders();\r\n        fetchStats();\r\n    }, []);\r\n\r\n    // --- Polling-based real-time updates (Vercel-compatible) ---\r\n    useEffect(() => {\r\n        console.log('AdminOrderManagementPage setting up polling for real-time updates');\r\n        \r\n        // Poll for updates every 20 seconds for admin pages\r\n        const pollInterval = setInterval(() => {\r\n            fetchOrders(true);\r\n            fetchStats();\r\n        }, 20000);\r\n\r\n        // Also poll when admin focuses back on the tab\r\n        const handleFocus = () => {\r\n            fetchOrders(true);\r\n            fetchStats();\r\n        };\r\n\r\n        window.addEventListener('focus', handleFocus);\r\n\r\n        return () => {\r\n            clearInterval(pollInterval);\r\n            window.removeEventListener('focus', handleFocus);\r\n        };\r\n    }, []);\r\n\r\n    const fetchOrders = async (silent = false) => {\r\n        try {\r\n            if (!silent) {\r\n                setLoading(true);\r\n            }\r\n            const response = await apiRequest('/orders');\r\n            const newOrders = response.data;\r\n            \r\n            setOrders(newOrders);\r\n        } catch (error) {\r\n            console.error('Error fetching orders:', error);\r\n        } finally {\r\n            if (!silent) {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchStats = async () => {\r\n        try {\r\n            const response = await apiRequest('/orders/stats');\r\n            setStats(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching stats:', error);\r\n        }\r\n    };\r\n\r\n    const [updatingStatus, setUpdatingStatus] = useState({});\r\n    const [statusUpdateSuccess, setStatusUpdateSuccess] = useState({});\r\n\r\n    const updateOrderStatus = async (orderId, status, note = '') => {\r\n        try {\r\n            // Set loading state for this specific order\r\n            setUpdatingStatus(prev => ({ ...prev, [orderId]: true }));\r\n            \r\n            // Optimistic update - immediately update the local state\r\n            setOrders(prevOrders => \r\n                prevOrders.map(order => \r\n                    order._id === orderId \r\n                        ? { ...order, status } \r\n                        : order\r\n                )\r\n            );\r\n\r\n            // Make the API call\r\n            await apiRequest(`/orders/${orderId}`, 'PUT', { status, note });\r\n            \r\n            // Small delay to show the optimistic update\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n            \r\n            // Refresh data to ensure consistency\r\n            await fetchOrders();\r\n            await fetchStats();\r\n            \r\n            // Show success feedback\r\n            const order = orders.find(o => o._id === orderId);\r\n            if (order) {\r\n                // Show success indicator\r\n                setStatusUpdateSuccess(prev => ({ ...prev, [orderId]: true }));\r\n                // Hide success indicator after 2 seconds\r\n                setTimeout(() => {\r\n                    setStatusUpdateSuccess(prev => ({ ...prev, [orderId]: false }));\r\n                }, 2000);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating order status:', error);\r\n            alert('Error updating order status');\r\n            \r\n            // Revert optimistic update on error\r\n            await fetchOrders();\r\n        } finally {\r\n            // Clear loading state\r\n            setUpdatingStatus(prev => ({ ...prev, [orderId]: false }));\r\n        }\r\n    };\r\n\r\n    const updateTracking = async (orderId) => {\r\n        try {\r\n            await apiRequest(`/orders/${orderId}/tracking`, 'PUT', trackingData);\r\n            setEditingTracking(false);\r\n            setTrackingData({ trackingNumber: '', carrier: '', estimatedDelivery: '' });\r\n            fetchOrders();\r\n        } catch (error) {\r\n            console.error('Error updating tracking:', error);\r\n            alert('Error updating tracking information');\r\n        }\r\n    };\r\n\r\n    const getStatusIcon = (status) => {\r\n        return null; // No icon needed\r\n    };\r\n\r\n    const getStatusColor = (status) => {\r\n        switch (status) {\r\n            case 'ready-for-pickup':\r\n                return 'bg-green-100 text-green-800';\r\n            case 'in-progress':\r\n                return 'bg-blue-100 text-blue-800';\r\n            case 'cancelled':\r\n                return 'bg-red-100 text-red-800';\r\n            case 'pending':\r\n            default:\r\n                return 'bg-yellow-100 text-yellow-800';\r\n        }\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        return new Date(dateString).toLocaleDateString('en-IN', {\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        });\r\n    };\r\n\r\n    const formatTime = (dateString) => {\r\n        return new Date(dateString).toLocaleTimeString('en-IN', {\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            second: '2-digit'\r\n        });\r\n    };\r\n\r\n    const isNewOrder = (orderDate) => {\r\n        const now = new Date();\r\n        const orderTime = new Date(orderDate);\r\n        const timeDiff = now - orderTime;\r\n        // Consider order as \"new\" if it's less than 5 minutes old\r\n        return timeDiff < 5 * 60 * 1000;\r\n    };\r\n\r\n    const filteredOrders = orders.filter(order => {\r\n        if (filter === 'all') return true;\r\n        return order.status === filter;\r\n    });\r\n\r\n    const [openDropdownId, setOpenDropdownId] = useState(null);\r\n    const dropdownRefs = useRef({});\r\n\r\n    // Close dropdown on outside click\r\n    useEffect(() => {\r\n      function handleClickOutside(event) {\r\n        if (openDropdownId !== null && dropdownRefs.current[openDropdownId] && !dropdownRefs.current[openDropdownId].contains(event.target)) {\r\n          setOpenDropdownId(null);\r\n        }\r\n      }\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, [openDropdownId]);\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"flex justify-center items-center min-h-[60vh]\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n            {/* New Order Notification */}\r\n            {/* Removed new order notification as per edit hint */}\r\n\r\n            <div className=\"flex justify-between items-center mb-8\">\r\n                <h1 className=\"text-3xl font-bold text-gray-900\">Order Management</h1>\r\n                \r\n                {/* Refresh Controls */}\r\n                <div className=\"flex items-center space-x-4\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                        <span className=\"text-sm text-gray-600\">\r\n                            Last updated: {formatTime(new Date())}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Stats Cards */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\r\n                <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Total Orders</h3>\r\n                    <p className=\"text-3xl font-bold text-blue-600\">{stats.totalOrders || 0}</p>\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Total Revenue</h3>\r\n                    <p className=\"text-3xl font-bold text-green-600\">₹{stats.totalRevenue || 0}</p>\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Pending Orders</h3>\r\n                    <p className=\"text-3xl font-bold text-yellow-600\">\r\n                        {stats.statusBreakdown?.find(s => s._id === 'pending')?.count || 0}\r\n                    </p>\r\n                </div>\r\n                <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Ready for Pickup</h3>\r\n                    <p className=\"text-3xl font-bold text-green-600\">\r\n                        {stats.statusBreakdown?.find(s => s._id === 'ready-for-pickup')?.count || 0}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Filters */}\r\n            <div className=\"flex justify-between items-center mb-6\">\r\n                <div className=\"flex space-x-2\">\r\n                    <select\r\n                        value={filter}\r\n                        onChange={(e) => setFilter(e.target.value)}\r\n                        className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                        <option value=\"all\">All Orders</option>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"in-progress\">In Progress</option>\r\n                        <option value=\"ready-for-pickup\">Ready for Pickup</option>\r\n                        <option value=\"cancelled\">Cancelled</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Orders List */}\r\n            <div className=\"space-y-6\">\r\n                {filteredOrders.map((order) => (\r\n                    <div key={order._id} className={`bg-white rounded-lg shadow-md ${isNewOrder(order.createdAt) ? 'ring-2 ring-green-500 ring-opacity-50' : ''}`}>\r\n                        {/* Order Header */}\r\n                        <div className=\"p-6 border-b border-gray-200\">\r\n                            <div className=\"flex justify-between items-start\">\r\n                                <div>\r\n                                    <div className=\"flex items-center space-x-3 mb-2\">\r\n                                        <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                                            Order #{order.orderNumber}\r\n                                        </h3>\r\n                                        {isNewOrder(order.createdAt) && (\r\n                                            <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full\">\r\n                                                <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                                                </svg>\r\n                                                New\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                    <p className=\"text-sm text-gray-600\">\r\n                                        Customer: {order.user?.name} ({order.user?.email})\r\n                                    </p>\r\n                                    <p className=\"text-sm text-gray-600\">\r\n                                        Placed on {formatDate(order.createdAt)}\r\n                                    </p>\r\n                                    <p className=\"text-sm text-gray-600\">\r\n                                        Total: ₹{order.totalAmount}\r\n                                    </p>\r\n                                </div>\r\n                                \r\n                                <div className=\"flex items-center space-x-4\">\r\n                                    {/* Status Update */}\r\n                                    <div className=\"flex items-center space-x-2\">\r\n                                        <label className=\"text-sm font-medium text-gray-700\">Status:</label>\r\n                                        <div className=\"relative\" ref={el => dropdownRefs.current[order._id] = el}>\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                disabled={updatingStatus[order._id]}\r\n                                                className={`rounded-2xl px-4 py-1 text-sm font-medium flex items-center justify-center focus:outline-none border border-gray-300 transition-all min-w-[120px] ${getStatusColor(order.status)} ${updatingStatus[order._id] ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                                                onClick={() => setOpenDropdownId(openDropdownId === order._id ? null : order._id)}\r\n                                            >\r\n                                                {updatingStatus[order._id] ? (\r\n                                                    <svg className=\"animate-spin w-4 h-4 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n                                                    </svg>\r\n                                                ) : statusUpdateSuccess[order._id] ? (\r\n                                                    <div className=\"flex items-center\">\r\n                                                        <svg className=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                                                        </svg>\r\n                                                        <span className=\"ml-1 text-xs text-green-600\">Updated</span>\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <span className=\"w-full text-center\">{statusOptions.find(opt => opt.value === order.status)?.label || order.status}</span>\r\n                                                        <svg className=\"ml-2 w-4 h-4 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                                                        </svg>\r\n                                                    </>\r\n                                                )}\r\n                                            </button>\r\n                                            {openDropdownId === order._id && !updatingStatus[order._id] && (\r\n                                                <div className=\"absolute left-0 mt-2 z-50 bg-white shadow-xl rounded-xl py-2 px-2 min-w-[400px] w-max border border-gray-200 max-h-60 overflow-y-auto\">\r\n                                                    <div className=\"flex flex-row gap-2\">\r\n                                                        {statusOptions.map((opt, idx) => {\r\n                                                            const isSelected = order.status === opt.value;\r\n                                                            return (\r\n                                                                <div\r\n                                                                    key={opt.value}\r\n                                                                    className={`cursor-pointer flex items-center justify-center rounded-full px-2 py-1 text-xs font-medium transition-all ${getStatusColor(opt.value)}\r\n                                                                        ${isSelected ? 'ring-2 ring-blue-500 border border-blue-400 bg-opacity-90' : ''}\r\n                                                                        hover:ring-2 hover:ring-blue-300 hover:bg-opacity-80`}\r\n                                                                    style={{ minWidth: 0 }}\r\n                                                                    onClick={() => {\r\n                                                                        setOpenDropdownId(null);\r\n                                                                        if (!isSelected) updateOrderStatus(order._id, opt.value);\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <span className=\"w-full text-center\">{opt.label}</span>\r\n                                                                    {isSelected && (\r\n                                                                        <svg className=\"ml-1 w-3 h-3 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\r\n                                                                        </svg>\r\n                                                                    )}\r\n                                                                </div>\r\n                                                            );\r\n                                                        })}\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <button\r\n                                        onClick={() => setSelectedOrder(selectedOrder?._id === order._id ? null : order)}\r\n                                        className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors\"\r\n                                    >\r\n                                        <span>Details</span>\r\n                                        <svg className={`ml-1 w-4 h-4 transition-transform ${selectedOrder?._id === order._id ? 'rotate-180' : ''}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                                        </svg>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Order Details (Expandable) */}\r\n                        {selectedOrder?._id === order._id && (\r\n                            <div className=\"p-6 bg-gray-50\">\r\n                                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n                                    {/* Order Items */}\r\n                                    <div>\r\n                                        <h4 className=\"text-lg font-semibold mb-4\">Order Items</h4>\r\n                                        <div className=\"space-y-3\">\r\n                                            {order.items.map((item, index) => (\r\n                                                <div key={index} className=\"flex items-center space-x-3 p-3 bg-white rounded-lg\">\r\n                                                    <img\r\n                                                        src={item.product.image || '/default-product.jpg'}\r\n                                                        alt={item.product.name}\r\n                                                        className=\"w-12 h-12 object-cover rounded\"\r\n                                                    />\r\n                                                    <div className=\"flex-1\">\r\n                                                        <p className=\"font-medium\">{item.product.name}</p>\r\n                                                        <p className=\"text-sm text-gray-600\">\r\n                                                            Qty: {item.quantity} × ₹{item.price}\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <p className=\"font-semibold\">₹{item.subtotal}</p>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Order Management */}\r\n                                    <div>\r\n                                        <h4 className=\"text-lg font-semibold mb-4\">Order Management</h4>\r\n\r\n                                        {/* Tracking Information */}\r\n                                        <div className=\"bg-white p-4 rounded-lg\">\r\n                                            <div className=\"flex justify-between items-center mb-2\">\r\n                                                <h5 className=\"font-medium\">Tracking Information</h5>\r\n                                                <button\r\n                                                    onClick={() => setEditingTracking(!editingTracking)}\r\n                                                    className=\"inline-flex items-center px-2 py-1 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors\"\r\n                                                >\r\n                                                    Edit\r\n                                                </button>\r\n                                            </div>\r\n                                            \r\n                                            {editingTracking ? (\r\n                                                <div className=\"space-y-3\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Tracking Number\"\r\n                                                        value={trackingData.trackingNumber}\r\n                                                        onChange={(e) => setTrackingData({...trackingData, trackingNumber: e.target.value})}\r\n                                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                                    />\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Carrier\"\r\n                                                        value={trackingData.carrier}\r\n                                                        onChange={(e) => setTrackingData({...trackingData, carrier: e.target.value})}\r\n                                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                                    />\r\n                                                    <input\r\n                                                        type=\"date\"\r\n                                                        value={trackingData.estimatedDelivery}\r\n                                                        onChange={(e) => setTrackingData({...trackingData, estimatedDelivery: e.target.value})}\r\n                                                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                                                    />\r\n                                                    <div className=\"flex space-x-2\">\r\n                                                        <button\r\n                                                            onClick={() => updateTracking(order._id)}\r\n                                                            className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm\"\r\n                                                        >\r\n                                                            Save\r\n                                                        </button>\r\n                                                        <button\r\n                                                            onClick={() => setEditingTracking(false)}\r\n                                                            className=\"px-3 py-1 bg-gray-300 text-gray-700 rounded text-sm\"\r\n                                                        >\r\n                                                            Cancel\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            ) : (\r\n                                                <div className=\"text-sm space-y-1\">\r\n                                                    <p><span className=\"font-medium\">Tracking:</span> {order.tracking?.trackingNumber || 'Not set'}</p>\r\n                                                    <p><span className=\"font-medium\">Carrier:</span> {order.tracking?.carrier || 'Not set'}</p>\r\n                                                    <p><span className=\"font-medium\">Est. Delivery:</span> {order.tracking?.estimatedDelivery ? formatDate(order.tracking.estimatedDelivery) : 'Not set'}</p>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Order Details */}\r\n                                    <div>\r\n                                        <h4 className=\"text-lg font-semibold mb-4\">Order Details</h4>\r\n                                        \r\n                                        {/* Shipping Address */}\r\n                                        <div className=\"bg-white p-4 rounded-lg mb-4\">\r\n                                            <h5 className=\"font-medium mb-2\">Shipping Address</h5>\r\n                                            <div className=\"text-sm\">\r\n                                                <p className=\"font-medium\">{order.shippingAddress.name}</p>\r\n                                                <p>{order.shippingAddress.street}</p>\r\n                                                <p>{order.shippingAddress.city}, {order.shippingAddress.state} {order.shippingAddress.zipCode}</p>\r\n                                                <p>{order.shippingAddress.country}</p>\r\n                                                <p className=\"mt-1\">📞 {order.shippingAddress.phone}</p>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* Payment Info */}\r\n                                        <div className=\"bg-white p-4 rounded-lg mb-4\">\r\n                                            <h5 className=\"font-medium mb-2\">Payment Information</h5>\r\n                                            <div className=\"text-sm space-y-1\">\r\n                                                <p><span className=\"font-medium\">Method:</span> {order.payment?.method?.toUpperCase() || 'Not set'}</p>\r\n                                                <p><span className=\"font-medium\">Status:</span> {order.payment?.status || 'Not set'}</p>\r\n                                                {order.payment?.transactionId && (\r\n                                                    <p><span className=\"font-medium\">Transaction ID:</span> {order.payment.transactionId}</p>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {/* Order Summary */}\r\n                                        <div className=\"bg-white p-4 rounded-lg\">\r\n                                            <h5 className=\"font-medium mb-2\">Order Summary</h5>\r\n                                            <div className=\"text-sm space-y-1\">\r\n                                                <div className=\"flex justify-between\">\r\n                                                    <span>Subtotal:</span>\r\n                                                    <span>₹{order.subtotal}</span>\r\n                                                </div>\r\n                                                <div className=\"flex justify-between\">\r\n                                                    <span>Tax:</span>\r\n                                                    <span>₹{order.tax}</span>\r\n                                                </div>\r\n                                                <div className=\"flex justify-between\">\r\n                                                    <span>Shipping:</span>\r\n                                                    <span>{order.shippingCost === 0 ? 'Free' : `₹${order.shippingCost}`}</span>\r\n                                                </div>\r\n                                                <div className=\"border-t pt-1 flex justify-between font-semibold\">\r\n                                                    <span>Total:</span>\r\n                                                    <span>₹{order.totalAmount}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminOrderManagementPage; "],"names":["statusOptions","value","label","AdminOrderManagementPage","_stats$statusBreakdow","_stats$statusBreakdow2","_stats$statusBreakdow3","_stats$statusBreakdow4","orders","setOrders","useState","loading","setLoading","selectedOrder","setSelectedOrder","filter","setFilter","stats","setStats","editingTracking","setEditingTracking","trackingData","setTrackingData","trackingNumber","carrier","estimatedDelivery","useEffect","fetchOrders","fetchStats","console","log","pollInterval","setInterval","handleFocus","window","addEventListener","clearInterval","removeEventListener","async","silent","arguments","length","undefined","newOrders","apiRequest","data","error","response","updatingStatus","setUpdatingStatus","statusUpdateSuccess","setStatusUpdateSuccess","getStatusColor","status","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","isNewOrder","orderDate","filteredOrders","order","openDropdownId","setOpenDropdownId","dropdownRefs","useRef","handleClickOutside","event","current","contains","target","document","_jsx","className","children","_jsxs","toLocaleTimeString","second","totalOrders","totalRevenue","statusBreakdown","find","s","_id","count","onChange","e","map","_order$user","_order$user2","_statusOptions$find","_order$tracking","_order$tracking2","_order$tracking3","_order$payment","_order$payment$method","_order$payment2","_order$payment3","concat","createdAt","orderNumber","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","user","name","email","totalAmount","ref","el","type","disabled","onClick","_Fragment","opt","idx","isSelected","style","minWidth","orderId","note","prev","_objectSpread","prevOrders","Promise","resolve","setTimeout","o","alert","updateOrderStatus","items","item","index","src","product","image","alt","quantity","price","subtotal","placeholder","updateTracking","tracking","shippingAddress","street","city","state","zipCode","country","phone","payment","method","toUpperCase","transactionId","tax","shippingCost"],"sourceRoot":""}